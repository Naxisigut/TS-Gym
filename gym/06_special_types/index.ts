/* ----------------------------------------------------------------------- */
/* ----------------------------------------------------------------------- */
/* -----------------------------------Any---------------------------------- */
/* ----------------------------------------------------------------------- */
/* ----------------------------------------------------------------------- */
/* Any的特性：
1. any是一种顶级类型，是任何类型的父类型，任何类型都可以满足any的约束 
2. 与正常逻辑相悖，any与除never外的任何类型做交叉，结果均为any
3. 不仅任意类型可以满足any的约束，any也可以满足任意类型的约束（不确切，应为any会跳过所有类型检查），所以当我们使用一个类型为any的变量时，TS不会做任何类型检查，可以把它传给任何函数。
*/
type res119 = 1 & any
type res120 = 1 | any
type res121 = never | any
type res122 = never & any
type res125 = any extends 1 ? 2 : 3 // 因为any跳过了类型检查，所以这里返回了2和3的联合类型

const testFunc001 = (name: string)=>{
  return true
}
const a: any = 1
testFunc001(a) // 因为a为any类型，所以即使这个函数要求参数类型为string，即使a实际为字面量类型1，但这里不会报错

/* 判断是否是Any */
type isAny<T> = 1 extends 2 & T ? true : false
type res123 = isAny<any>
type res124 = isAny<unknown>

/* 判断两个类型是否相同 */
type isEqualBug<T, P> = T extends P ? P extends T ? 1 : 2 : 2
type res126 = isEqualBug<any, 'a'>
